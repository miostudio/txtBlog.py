com33-network




========================================
【哈工大】计算机网络 李全龙（全59讲）
----------------------------------------
1. 什么是计算机网络？

计算机网络就是 互联的、自治的计算机集合。

自治：无主从关系。
互联：互联互通。


2. 什么是 Internet?

硬件 + 网络协议。


3. 网络协议 (network protocol)
网络数据交换而建立的规则、标准或约定。

格式、意义、顺序，及动作。

(1) 语法 (Syntax)
  数据与控制信息的结构或格式
  信号电平

(2) 语义 (Semantics)
   需要发送何种控制信息
   完成何种动作、做出何种响应
   差错控制
(3) 时序 Timing
    事件顺序
	速度匹配




4. 协议规范了网络中所有信息发送和接收的过程。
eg: TCP, IP, HTTP, Skype, 802.11

Internet 协议标准: 
	RFC: Request for comments;




========================================
1. 计算机网络结构
----------------------------------------

1. 网络边缘
  主机
  网络应用

接入网络、物理介质
	有线或无线通信链路

网络核心（核心网络）
	互联的路由器(或分组转发设备)
	网络之网络


(1). 网络边缘

主机(端系统):
	web, email

客户/服务器(client/server)应用模型

对等(peer-peer, P2P)应用模型
	BT, Skype


(3) 接入网络
用户最关心的：
	带宽(bandwidth): bps? 每秒传输的数据量
	共享/独占?


DSL: 家庭电话线传输
	多路复用技术：语音信号与数字信号的分离

电缆网络(cable modem): 有线电视网络
	频分...
	非对称的: 上行和下行是不同的


以太网接入: 机构(企业)接入


无线接入网络: 
	无线局域网
	广域无线接入


(4) 网络核心 
互联的路由器网络
网络核心的关键功能: 路由 + 转发

路由表 == 本地转发表
	目的地址 | 输出链路
	路由算法: 获取本地转发表的过程
路由(routing): 确定分组从源到目的的传输路径。
转发(forwarding): 将分组从路由器的输入端口交换至正确的输出端口



========================================
2. Internet 结构： 网络之网络
----------------------------------------
1. 端系统通过 接入ISP(access ISPs) 连接到 internet

接入 ISP 必须进一步互联
构成复杂的网络

两两互联：不可行，技术、经济问题
ISP 互联，然后边缘设备连上

这些 ISP 怎么互联呢?
	IXP: internet exchange point
	对等链路: peering link

区域网络 reginal network 

内容提供商 content provider networks 



2. 现在的结构:
分级




========================================
3. 网络核心
----------------------------------------
1. 怎么实现数据交换？

N^2 链路问题
互联



2. 交换
	动态转接

动态分配传输资源



3. 数据交换的类别
(1) 电路交换
最典型的：电话网络
3个阶段：呼叫、通信、释放连接
特点：独占资源。

多路复用技术: multiplexing，简称 复用。
	- 频分多路复用技术: 频率上划分，闭路电视
	- 时分多路复用技术TDM，使用时间上划分，帧
	- 波分多路复用WDM，光通信按光的波长区分
	- 码分多路复用CDM，无限链路共享(蜂窝网，卫星通信等)
		编码信号 = (原始数据) * (码片序列)
		每个用户的码片序列必须正交(orthogonal)
		原理: 用户的信号都是同样的频率和时间。
			怎么加密？
			怎么解密？

(2) 报文交换和分组交换

报文交换(message switch)
一次发送一个文件

分组交换(package switch)：把报文分拆出来的一系列相对较小的数据包。
	要把数据块加上 头信息
	报文的拆分和重组，产生额外开销

分组交换：统计多路复用 statical mutiplexing
	分组具有顺序不确定性
	按需使用带宽


1) 都采用 存储-转发(store and forwarding) 的交换方式。

2) 优劣
更快：分组交换，分组后可以并行；
	需要的路由缓存比较小：要先存储，再转发

问题：分组交换总时间的计算？


分组交换 vs 电路交换？
	分组交换允许更多的用户使用网络。


因特网就是 分组交换。


存在的问题：
	可能产生拥塞：可能丢帧





========================================
4. 计算机网络性能
----------------------------------------
1. 网络速率
b/s, kb/s, Mb/s, Gb/s 
换算单位是 1000.


2. 带宽 
物理：单位是 赫兹 Hz
网络：最高数据量 单位 b/s(bps)


3. 延时/时延(delay 或 latent)
Q: 分组交换为什么会丢包和延迟？
A: 因为要排队。


4. 四种分组延迟
传输延迟：发送一个包开始，到最后一个包发送完的时间。
传播延迟：从一个点经过链路发到另一点，经过网络
排队延迟：路由器在忙。
节点处理: 到了之后，把所有包整合。



5. 时延带宽积

以比特位单位的链路长度。



6. 分组丢失(丢包)
队列缓存容量有限
分组到达已满队列将被丢弃
丢弃的包可能重发，也可能不重发



7. 吞吐量/率(throughput)
发送端与接收端之间传输速率 b/s

取决于瓶颈链路。







========================================
5. 计算机网络体系结构
----------------------------------------
1. 计算机网络是一个非常复杂的系统
涉及到许多组成部分

主机 hosts
路由器 routers
各种链路 links
应用 application 
协议 protocols
硬件、软件
......

问题：是否存在一种系统结构有效描述网络？
	利用什么样的结构？
	至少用于讨论网络？
A: 分层结构。




2. 复杂系统的分层结构
(1) 类比：航空旅行
	票务
	行李
	登机口
	起飞
	飞机路由、飞行


(2) 网络体系结构式从 功能上 描述计算机网络结构
每层遵循某个/些 网络协议 完成本层功能。
体系结构是 抽象的，不关心具体实现。

(3) 为什么采用分层结构？
- 结构清晰
	分层的 参考模型 reference model 
- 体现了模块化思想，方便系统的更新、维护。
	部分的改变不影响其他部分/层
- 有利于标准化


分层是否有不利之处？
分层太多，可能系统效率降低。




3. 分层网络体系结构基本概念

服务用户
服务提供者

协议定义的是，相同层级之间按什么方式交换数据。

上下层之间，通过接口进行交互。
	通过服务访问点 SAP(service access point)，交换原语。






========================================
|-- OSI 参考模型共7层，及每层的功能
----------------------------------------
0. OSI 参考模型 1984年
目的：支持异构网络系统的互联互通。
理论成功，市场失败。

(1) 分成7个层次，每层完成特定的网络功能。
	7 应用层 Application
	6 表示层 Presentation
	5 会话层 Session
	4 传输层 Transport
	3 网络层 Network
	2 数据链路层 Data link
	1 物理层 Physical


(2) OSI参考模型解释的通信
主机A -----> 中间网络 ----> 主机B
应用层                    应用层  
表示层                    表示层 
会话层                    会话层 
传输层                    传输层   
网络层      网络层        网络层    
数据链路层  数据链路层    数据链路层
物理层      物理层        物理层    

中间网络只需要完成3个部分。
各个平级之间的通信是通过协议实现的。
	但是这只是逻辑上的，物理上，还是依赖传输介质。

把不需要中间网络参与的4个层，叫做 端对端层(end-end)
	中间网络参与的3个层，叫 非端对端层。


(3) OSI 参考模型数据封装与通信
主机A              ------->        主机B

应用层 用户数据AH                     应用层 用户数据AH
v                                     ^
表示层 A-PDU|PH                       表示层 A-PDU|PH
v                                     ^
会话层 P-PDU|SH                       会话层 P-PDU|SH
v                                     ^
传输层 S-PDU|TH                       传输层 S-PDU|TH
v                                     ^
网络层 T-PDU|NH                       网络层 T-PDU|NH
v                                     ^
数据链路层 DT|N-PDU|DH                数据链路层 DT|N-PDU|DH
v                                     ^
物理层  二进制比特 -------网络---->   物理层  二进制比特 


数据逐渐封装，传输后，有逐步解包。
	通常是加头，但是链路层可以加头和加尾。



(4) 为什么需要数据封装
- 增加 控制信息
	构造协议数据单元 PDU 
- 控制信息主要包括:
	地址 Address: 表识发送端/接收端
	差错检测编码(Error-detecting code)
	协议控制: 优先级、服务质量等







每层的功能：从最底层到最高层，
先说3个 非端对端层，再说4个 端到端层。

1. 物理层功能
接口特性: 
	接口特性
	电气特性
	功能特性
	规程特性

比特编码:
	与通信技术手段有关

数据率
比特同步：
	时钟同步
传输模式
	单工模式(Simplex)：只能A->B
	半双工(half-duplex):
		A->B，另一个时间是 B->A 
	双全共(full-duplex)：
		同时A->B, B->A 




2. 数据链路层
	加头和加尾。

- 负责 节点-节点(node-to-node)数据传输
- 组帧(Framing)
- 物理寻址(physical addressing)
	在帧头中增加发送端或接收端的 物理地址 标识数据
	有发送过来，自己不是目的则不接受。
- 流量控制(Flow control)
	避免淹没接收端
- 差错控制(Error control)
- 访问(接入)控制(Access control)




3. 网络层功能
- 负责 源主机到目的主机 数据分组(packet)交付
	可能穿越多个网络
- 逻辑寻址(Logical addressing)
	全局位移
- 路由(Routing)
- 分组转发





4. 传输层功能
把会话层的数据包分割成小的数据段，发送到网络层。
负责 源-目的(端-端) （进程间） 完整报文 传输。

- 分段与重组
- SAP 寻址:
	确保将完整报文提交给正确的 进程，如端口号。
- 连接控制
- 流量控制
- 差错控制





5. 会话层功能

- 对话控制(dialog controlling)
	建立、维护
- 同步(synchronization)
	在数据流中插入"同步点"
最 薄 的一层。





6. 表示层 功能 
处理两个系统间交换信息的 语法与语义(syntax and semantics)问题 

- 数据表示转化
	转换为主机独立的编码
- 加密/解密
- 压缩/解压缩




7. 应用层 功能 

- 支持用户通过用户代理(如 浏览器)或 网络接口 使用网络(服务)
- 典型应用层服务
	文件传输 ftp
	电子邮件 smtp 
	web(http)
	...






========================================
|-- TCP/IP 参考模型
----------------------------------------
OSI 模型是先有理论，后有实践。

1. TCP/IP 则: 先有实践，再总结的分层。

应用层    http ... smtp,     DNS ... RTP
传输层          TCP              UDP
网际层                 IP
网络接口层  网络接口1  网络接口2  网络接口3

从上往下 到IP:
	Everything over IP 
	IP 可为各式各样的应用程序提供服务。

从IP 往下:
	IP over everything
	IP 可应用到各式各样的网络上。





2. 五层参考模型

实际上我们希望把底层 网络接口层 打开，这样就是五层。

综合了 OSI 和 TCP/IP 的优点。
	因特网就是这样构建的。


- 5应用层: 支持各种网络应用
	ftp, smtp, http
- 4传输层: 进程-进程的数据传输
	TCP, UDP
- 3网络层: 源主机到目的主机的数据分组路由与转发
	IP 协议、路由协议等
- 2数据链路层: 相邻网络元素(主机、交换机、路由器等)的数据传输
	以太网(Ethernet)，802.11(WiFi)、PPP
- 1物理层: 比特传输





3. 五层模型的数据封装

源主机(1-5) --> 交换机 switch(1,2) --> 路由器 router(1,2,3)  --> 目的主机(1-5)

可见 交换机 与 路由器 的差异：
	路由器还有 网络层 的功能，而交换机没有。








========================================
应用层： (主讲人：聂兰顺)
----------------------------------------

1.位置：最上层
application
transport
netwrok
link
physical 

典型网络应用
	百度
	qq
	支付宝
	淘宝
	网易公开课
	微信
	迅雷
	...



2. 主要内容

网络服务，需要联网，部分运行在本地，部分运行在服务器上。

(1) 网络应用体系结构：

	客户端/服务区: client/server
	P2P
	混合结构

服务器:
	7*24 提供服务
	永久域名/地址
	大量服务器实现可扩展性

客户端：
	与服务器通信
	间歇性接入网络
	动态IP

P2P:
	没有永远在线的服务
	任意节点之间可以直接通信
	节点间歇性接入网络
	节点可能改变IP地址
	优点：高度可伸缩
	缺点：难管理

混合结构：napster
	文件搜索：c/s结构
	文件传输：p2p结构




(2) 网络应用 进程通信
进程：主机上运行的程序

同一个主机进程间通信：
	进程间通信机制
	操作系统提供

不同主机进程间通信：
	消息交换
	套接字：socket


(3)如何寻址进程？
	不同主机进程间通信，每个进程必须拥有标示符
	IP 地址 
		Q:有IP地址，是否足以定位进程？
		A:否。同一个主机上有多个进程需要通信。
	端口号/Port number
		主机上每个进程分一个端口号
	进程的标示符：IP地址+端口号


(4)应用层协议
	网络应用需要遵循应用层协议
	公开协议
		由 RFC(Request For Comments)定义
		允许互操作
		HTTP, SMTP, ...
	私有协议
		多数 P2P 文件共享应用

规定：
	消息的类型type
		请求消息
		响应消息
	消息的语法/格式 
	...





3. 网络应用的需求与传输层服务

(1) 网络应用的对传输服务需求
	可靠性(reliability)/数据丢失(data loss): 汇款、看视频
	时延 timing delay: 通话、文件下载
	带宽(bandwidth): 看视频、下载文件

(2) internet 提供的传输服务
TCP 服务 
	面向连接: 全双工
	可靠地传输：不丢包、不乱序
	流量控制
	拥塞控制
	不提供时/延保障
	不提供最小宽带保障

UDP 服务
	无连接
	不可靠的数据传输
	不提供：
		可靠性保障
		流量控制
		拥塞控制
		时/延保障
		宽带保障


app    应用层协议 传输层协议
email   smtp        TCP 








========================================
|-- web 应用
----------------------------------------
1.  web 与 http

word wide web: Tim Berners-Lee
	网页
	网页互相链接

网页 (web page) 包含多个对象(objects)
	对象: html 文件, jpg 图片, 视频文件, 动态脚本
	基本 html 文件: 包含对其他对象引用的链接

对象的寻址(addressing)
	URL(Uniform Resource Locator): 统一资源定位器 RFC1738
	scheme://host:port/path



2. http 协议 

超文本传输协议(HyperText Transfre Protocol)
C/S结构
传输层：TCP
	- 服务器在80端口等待客户端的请求
	- browser 发起到服务器TCP连接(创建套接字socket)
	- 服务器接收来自 browser 的TCP连接
	- 浏览器(http客户端)与web服务器(http服务器)交换http消息
	- 关闭TCP连接
http 无状态(stateless)





3. http 连接的两种类型

非持久性连接(nonpersistent http)
	- 每个TCP连接最多允许传输一个对象
	- http 1.0版本使用非持久性连接

持久性连接(persistent http)
	- 每个TCP连接允许传输多个对象
	- http 1.1 版本默认使用持久性连接


(1) 非持久连接，时间序列
1a 客户端请求访问 ss.edu 的80端口
	1b.http服务器在端口80等待TCP连接请求，接收连接并通知客户端
2a 客户端通过TCP连接的套接字，发送请求访问路径 xx/index.html 
	3.http服务器接收请求消息，解析，产生包含所需要对象的响应消息，通过套接字发送给客户端
	4.http服务器关闭tcp连接
5.解析 xx/index.html，显示html文件，发现有10个jpg图片
6. 为每个jpg对象重复步骤1-5


分析一下时间:


2) 响应时间分析与建模
RTT(Round Trip Time)
	客户端发送一个很小的数据包到服务器，并返回所经历的时间。

响应时间(Response time)
	- 发起、建立TCP连接：1个 RTT
	- 发送http请求消息到http响应消息的前几个字节到达：1个RTT
	- 响应消息中所包含的文件/对象传输时间

Total = 2RTT + 文件发送时间


3) 非持久http的问题 
每个对象需要2个RTT
OS为每个TCP连接开销资源(overhead)
浏览器会怎么做？
	打开多个并行的TCP连接以获取网页所需对象
	给服务器造成什么影响？


(2) 持久性连接 http 
发送响应后，服务器保持TCP连接的打开
后续的http消息可以通过这个连接发送。

无流水(pipelining) 的持久性连接

带流水机制的持久性连接
	http1.1 的默认选项
	收到所有的引用默认时间都是 1 RPT





4. http 请求消息 

(1) http 协议的两类消息
请求消息(request)
响应消息(response)
	都是用 ascii 码写的，可以直接读

请求消息:
	ASCII: 人直接可读


GET /someDir/Page.html HTTP/1.1
Host: www.some.edu
User-agent: Mozilla/4.0
Connection: close
Accept-language:fr

第一行 request method: GET/POST/HEAD/ cr lf
接着 header field name: value cr lf 
cr lf 
Entidy Body 消息体



(2) 上传输入的方法
POST 方法
	网页经常需要填写表格(form)
	客户端输入在 Entity Body 中

URL 方法:
	GET 方法



(3) 方法的类型
HTTP/1.0
	GET
	POST
	HEAD
		请 Server 不要将所请求的对象放入响应消息中

HTTP/1.1 新增了2种方法
	GET/POST/HEAD/
	PUT: 将消息体中的文件上传到url字段所指定的路径
	DELETE: 删除URL字段所指定的文件


(4) HTTP 响应消息

HTTP/1.1 200 OK
Connection: close
Date: Thu, 06 Aug 2022 18:00:15 GMT
Server: Apache/1.3.0 (Unix)
Last-Modified: Mon, 22 Jun 2022 ...
Cotent-Length: 6821
Content-Type: text/html

data data ...



第一行是 status line: Protocol /status code /status phrase
header lines: 键值对
空行
data, e.g: requested HTML file


==> 状态行
200 OK
404 Not Found


(5) 体验一下 http

利用 telnet 登录到某个web服务器
$ telnet www.hit.edu.cn 80

输入一个http请求
$ GET /about/profile.html HTTP/1.1
$ Host: www.hit.edu.cn 

查看http服务器所返回的响应消息





========================================
|-- Cookie 技术
----------------------------------------

1. http 协议无状态
很多应用需要服务器掌握客户端的状态
	网上购物

(2) RFC6265
Cookie 的组件
	假设到 http 之上
	http 响应消息的 cookie 头部行
	http 请求消息的 cookie 头部行
	客户端保存浏览器状态
	服务端用数据库保存

(3) Cookie 的作用
身份认证
购物车
推荐
web e-mail

(4) 隐私问题: 可能被广告商针对
cookie 怎么收集隐私?





========================================
|-- web 缓存/代理服务器技术
----------------------------------------
1. 功能 
不访问服务器的前提下满足客户端的http请求

(2) 为什么发明这种技术？
主要是性能
	缩短客户端请求的响应时间
	减少机构/组织的流量
	在大范围内（Internet）实现有效的内容分发: CDN


(2) 在客户和服务器之间: Proxy server

缓存服务器没有，则向原始服务器发送请求，并缓存下来。
缓存服务器有，则直接返回内容。

既充当客户端，又充当服务器。


(3) 机构内部与外部网络连接
如果增加一个内部 缓存服务器，则能起到增加宽带的作用。
效果：省钱，且提速。

类似于CPU的缓存的效果。

问题: 缓存服务器上是不是最新的呢？最好完全一致才是最好的。
解决方法: 条件性 GET 方法: Last-modified 参数
	发送 if-modifed-since: <date>
	服务器: 如果缓存的是新的，则相应消息不包含对象
		HTTP/1.0 304 Not Modified








========================================
|-- Email 应用
----------------------------------------

1. Email 构成组间
(1) 邮件服务器

邮箱：
消息队列: 等待发送的邮件

(2) SMTP 协议: RFC 2821
TCP 传输协议
端口 25
传输三个阶段:
	握手
	消息的传输
	关闭

命令/相应交互模式
	命令 command: ascii文本
	响应 response: 状态...


异步应用: 发送与接收不需要同时。

(3) 动手尝试 SMTP 交互
telnet servername 25
服务器返回代码220
输入以下命令与SMTP服务器交互:
	HELO
	MAIL FROM
	RCPT TO
	DATA
	QUIT

(4) SMTP 协议 
持久性连接
要求消息必须由7位ascii码构成
smtp服务器利用crlf.crlf确认消息的结束。


(5) 只能包含ascii，二进制(图片、音乐)怎么办？
MIME: 多媒体邮件扩展 RFC2045,2056





2. POP3 协议

(1) 用户访问自己的邮箱，使用的pop3协议等。
可见，Email 应用包含了不止一个协议。

POP3 协议的2个阶段:
	认证
	下载

IMAP: 更多功能、更复杂，能操纵邮件服务器的邮件
HTTP: 163，QQ mail等。

(2) POP3 是无状态的

(3) IMAP 协议 
更新的协议。

作业: 查资料，比较 IMAP 和 POP3 的不同。
调研主流Email服务对2者的支持。
手机上用的啥协议？







========================================
|-- DNS 应用: 互联网的核心应用
----------------------------------------
1.DNS: Domain Name System

(1) 互联网上主机/路由器的识别问题。
IP地址
域名: www.xx.com
	更好记忆

以上两个怎么映射？就是 DNS 服务。
	是一个应用层服务

(2) 作用
域名向IP地址的翻译
主机别名
负载均衡


(3) 分布式、层次式架构
为什么不使用集中式DNS? 不可伸缩。
	防止单点失败问题
	流量问题
	距离问题
	维护性问题


Root DNS Server 
->
com DNS servers   |  org DNS servers   | edu DNS servers 
->
... | pbs.org DNS servers  | ...


1) DNS 根域名服务器

2) TLD: top-level domain 顶级域名服务器

3) 权威(Authoritative)域名服务器

4) 本地域名解析服务器
	不严格属于层级体系
	每个 ISP 有一个本地域名服务器
		作为一个代理 proxy


(4) DNS 查询示例

迭代查询
递归查询
	似乎路程更远

缓存、更新机制

我国没有根域名服务器，对信息安全有什么影响?




(5) DNS 记录

资源记录 RR, Resource records

RR format: (name, value, type, ttl)

Type=A 
	name: 主机域名
	Value: IP地址

Type=NS
	name: 域(edu.cn)
	Value: 该域权威域名解析服务器的主机域名

Type=CNAME
	Name: 某一真实域名的别名 www.ibm.com 
	Value: 真实域名

Type=MX
	value 是与 name对应的邮件服务器。



(6) DNS协议与消息 
DNS 协议:
	查询(query)和 回复(reply消息)
	消息格式

作业: DNS用的传输协议是 TCP还是UTP?



(7) 如何创建域名?

比如创建 xx 公司，打算注册 xx.com 
顶级域名机构向 com 顶级域名解析服务器中插入2条记录
	(xx.com, dns1.xx.com, NS)
	(dns1.xx.com, 212.212.212.1, A)







========================================
|-- P2P协议
----------------------------------------
1. 文件分发: 客户机/服务器 vs P2P




8'57''














========================================
current: 12/59
----------------------------------------
https://www.bilibili.com/video/BV1FS4y1Y7Qe?p=2
2022.7.27 01
2022.8.10 02
2022.9.29 02,3(32')
2022.10.06 3,
2022.10.26 3,4
2022.10.28 4,5(3')
2022.11.6 5, 6 网络接入-前面讲过;
2022.11.8 7,8, 9
2022.11.12 9,
2022.11.23 9, 10-Email, 11-DNS, 12-P2P协议














========================================
----------------------------------------








========================================
----------------------------------------






========================================
----------------------------------------


========================================
----------------------------------------






========================================
----------------------------------------


========================================
----------------------------------------








========================================
----------------------------------------


========================================
----------------------------------------








========================================
----------------------------------------






========================================
----------------------------------------


========================================
----------------------------------------






========================================
----------------------------------------


========================================
----------------------------------------



