C++ 基础


友元: 破坏了封装特性，违反 OOP 原则。外面的函数也能调用类内的方法。
多重继承：会产生很多问题。java则抛弃了多重继承，使用单继承+接口。
异常处理: 比较重要
STL: 类模板，容器处理，string, stack, 
	CCF 考试等




========================================
主要参考书
----------------------------------------

1. 从网页开始
https://www.runoob.com/cplusplus/cpp-intro.html








========================================
行业牛人 的观点
----------------------------------------

1. tx 后端工程师
https://www.zhihu.com/people/frmf

鹅厂有的团队转了golang，我试过golang，我觉得写业务逻辑相比c++没有优势，所以我自己的团队还是坚持c++。
stl的100多种算法只要稍微熟练一点，各种常见的业务逻辑都可以写得很爽滑。但是很多人学stl只知道学容器，对于算法往往重视程度不够，所以平时写代码也不知道去用，白白浪费了这些好用的功能。
以后ranges成熟了这种现象应该会有所好转吧，毕竟ranges更好用一些，只是目前组件还不够多。

ranges for C++20简介: https://zhuanlan.zhihu.com/p/86809598


skynet它是一个轻量级的游戏服务器框架.
	怎么读源码: https://zhuanlan.zhihu.com/p/33898082
	网络处理skynet是采用reactor网络编程模型


评论: 
C++11之后写业务代码其实效率已经很高了。
确实，go的工具啥的还是太简陋了

C++有积累有框架限制的情况下，写起来很香。但是没有积累，从头撸轮子的话，没半斤八两就别干这个事了，服务器要的是稳定，性能还是第二位的。









========================================
C++ 有用的资源: 书籍推荐
----------------------------------------
以下资源包含了 C++ 有关的网站、书籍和文章。请使用它们来进一步学习 C++ 的知识。


1. C++ 有用的网站
C++ Standard Library headers − C++ 标准库。
C++ Programming − 这本书涵盖了 C++ 语言编程、软件交互设计、C++ 语言的现实生活应用。
C++ FAQ − C++ 常见问题
Free Country − Free Country 提供了免费的 C++ 源代码和 C++ 库，这些源代码和库涵盖了压缩、存档、游戏编程、标准模板库和 GUI 编程等 C++ 编程领域。
C and C++ Users Group − C 和 C++ 的用户团体提供了免费的涵盖各种编程领域 C++ 项目的源代码，包括 AI、动画、编译器、数据库、调试、加密、游戏、图形、GUI、语言工具、系统编程等。




2. C++ 有用的书籍
《Essential C++ 中文版》
《C++ Primer Plus 第6版中文版》
《C++ Primer中文版（第5版）》






========================================
C++ 简介
----------------------------------------

1. C++ 被认为是一种中级语言，它综合了高级语言和低级语言的特点。

2. C++ 完全支持面向对象的程序设计，包括面向对象开发的四大特性：

封装
抽象
继承
多态


3. 标准库
标准的 C++ 由三个重要部分组成：

核心语言，提供了所有构件块，包括变量、数据类型和常量，等等。
C++ 标准库，提供了大量的函数，用于操作文件、字符串等。
标准模板库（STL），提供了大量的方法，用于操作数据结构等。





4.编译器
$ g++ -v
Using built-in specs.
COLLECT_GCC=C:\Strawberry\c\bin\g++.exe
COLLECT_LTO_WRAPPER=C:/Strawberry/c/bin/../libexec/gcc/x86_64-w64-mingw32/7.1.0/lto-wrapper.exe
Target: x86_64-w64-mingw32
Configured with: ../../../src/gcc-7.1.0/configure --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --prefix=/mingw64 --enable-shared --enable-static --disable-multilib --enable-languages=c,c++,fortran,lto --enable-libstdcxx-time=yes --enable-threads=posix --enable-libgomp --enable-libatomic --enable-lto --enable-graphite --enable-checking=release --enable-fully-dynamic-string --enable-version-specific-runtime-libs --enable-libstdcxx-filesystem-ts=yes --disable-libstdcxx-pch --disable-libstdcxx-debug --disable-bootstrap --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-gnu-as --with-gnu-ld --with-arch=nocona --with-tune=core2 --with-libiconv --with-system-zlib --with-gmp=/opt/build/prerequisites/x86_64-w64-mingw32-static --with-mpfr=/opt/build/prerequisites/x86_64-w64-mingw32-static --with-mpc=/opt/build/prerequisites/x86_64-w64-mingw32-static --with-isl=/opt/build/prerequisites/x86_64-w64-mingw32-static --with-pkgversion='x86_64-posix-seh, Built by strawberryperl.com project' CFLAGS='-O2 -pipe -fno-ident -I/opt/build/x86_64-710-posix-seh-rt_v502/mingw64/opt/include -I/opt/build/prerequisites/x86_64-zlib-static/include -I/opt/build/prerequisites/x86_64-w64-mingw32-static/include' CXXFLAGS='-O2 -pipe -fno-ident -I/opt/build/x86_64-710-posix-seh-rt_v502/mingw64/opt/include -I/opt/build/prerequisites/x86_64-zlib-static/include -I/opt/build/prerequisites/x86_64-w64-mingw32-static/include' CPPFLAGS=' -I/opt/build/x86_64-710-posix-seh-rt_v502/mingw64/opt/include -I/opt/build/prerequisites/x86_64-zlib-static/include -I/opt/build/prerequisites/x86_64-w64-mingw32-static/include' LDFLAGS='-pipe -fno-ident -L/opt/build/x86_64-710-posix-seh-rt_v502/mingw64/opt/lib -L/opt/build/prerequisites/x86_64-zlib-static/lib -L/opt/build/prerequisites/x86_64-w64-mingw32-static/lib '
Thread model: posix
gcc version 7.1.0 (x86_64-posix-seh, Built by strawberryperl.com project)



(1) 源码 hello.cpp

#include<iostream>
using namespace std;
int main(){
	cout << "Hello, world!" << endl;
	return 0;
}


编译:
$ g++ hello.cpp
$ ./a.exe
Hello, world!








========================================
重载运算符和重载函数
----------------------------------------
1. 同名函数的形式参数（指参数的个数、类型或者顺序）必须不同。您不能仅通过返回类型的不同来重载函数。




2. 您可以重定义或重载大部分 C++ 内置的运算符。这样，您就能使用自定义类型的运算符。

重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。

Box operator+(const Box&);

声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数，如下所示：

Box operator+(const Box&, const Box&);


下面的实例使用成员函数演示了运算符重载的概念。在这里，对象作为参数进行传递，对象的属性使用 this 运算符进行访问，如下所示：

#include<iostream>
using namespace std;

class Box
{
	private:
		int length;
		int width;
		int height;
	
	public:
		double getVolume(){
			return length * width * height;
		}
		void setLength(double len){
			length=len;
		}
		void setWidth(double w){
			width=w;
		}
		void setHeight(double h){
			height=h;
		}
		//重载 + 运算符，用于把两个 Box 对象相加
		Box operator+(const Box& b){
			Box b2;
			b2.length = this->length + b.length;
			b2.width = this->width + b.width;
			b2.height = this->height + b.height;
			return b2;
		}
};

int main(){
	Box box1;
	Box box2;
	Box box3;
	double valume =0.0; //把体积存储在该变量中
	
	// box1 初始化
	box1.setLength(6.0);
	box1.setWidth(7.0);
	box1.setHeight(5.0);
	
	// box2 初始化
	box2.setLength(12.0);
	box2.setWidth(10.0);
	box2.setHeight(15.0);
	
	// box3 初始化
	box3 = box1 + box2;
	
	// output
	cout << "Volume of box1:" << box1.getVolume() << endl;
	cout << "Volume of box2:" << box2.getVolume() << endl;
	cout << "Volume of box3:" << box3.getVolume() << endl;
	
	return 0;
}




3.重载运算符/不可重载运算符

下面是可重载的运算符列表：

双目算术运算符	+ (加)，-(减)，*(乘)，/(除)，% (取模)
关系运算符	==(等于)，!= (不等于)，< (小于)，> (大于)，<=(小于等于)，>=(大于等于)
逻辑运算符	||(逻辑或)，&&(逻辑与)，!(逻辑非)
单目运算符	+ (正)，-(负)，*(指针)，&(取地址)
自增自减运算符	++(自增)，--(自减)
位运算符	| (按位或)，& (按位与)，~(按位取反)，^(按位异或),，<< (左移)，>>(右移)
赋值运算符	=, +=, -=, *=, /= , % = , &=, |=, ^=, <<=, >>=
空间申请与释放	new, delete, new[ ] , delete[]
其他运算符	()(函数调用)，->(成员访问)，,(逗号)，[](下标)



下面是不可重载的运算符列表：

.：成员访问运算符
.*, ->*：成员指针访问运算符
::：域运算符
sizeof：长度运算符
?:：条件运算符
#： 预处理符号



4.运算符重载实例
下面提供了各种运算符重载的实例，帮助您更好地理解重载的概念。

https://www.runoob.com/cplusplus/cpp-overloading.html




========================================
C++ 多态
----------------------------------------
1.

有继承关系时，一个子类实例，也同时是父类的实例。
调用方法时，优先调用子类的同名方法。


父类同名函数前加上 virtual 后，编译器看的是指针的内容，而不是它的类型。因此，由于 tri 和 rec 类的对象的地址存储在 *shape 中，所以会调用各自的 area() 函数。



每个子类都有一个函数 area() 的独立实现。这就是多态的一般使用方式。有了多态，您可以有多个不同的类，都带有同一个名称但具有不同实现的函数，函数的参数甚至可以是相同的。


(2) 虚函数
虚函数 是在基类中使用关键字 virtual 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。

我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为动态链接，或后期绑定。



(3) 纯虚函数 (就是 Java 中的接口)
就是父类只定义一个函数名字，不给出具体的实现。

虚函数声明如下：virtual ReturnType FunctionName(Parameter) 虚函数必须实现，如果不实现，编译器将报错

class Shape {
   protected:
      int width, height;
   public:
      Shape( int a=0, int b=0)
      {
         width = a;
         height = b;
      }
      // pure virtual function
      virtual int area() = 0;
};

= 0 告诉编译器，函数没有主体，上面的虚函数是纯虚函数。





2. 形成多态必须具备三个条件：

C++多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数；

(1)、必须存在继承关系；

(2)、继承关系必须有同名虚函数（其中虚函数是在基类中使用关键字Virtual声明的函数，在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数）；

(3)、存在基类类型的指针或者引用，通过该指针或引用调用虚函数；





3. 最终类和方法

在 C++11 及以后可以用关键字 final 来避免该函数再次被重写。

	void func() final//在子类中不能被重写的方法
	{
		cout<<"This is _Base"<<endl;
	}


class Class_name final //不能被继承的类
{
    ...
};







========================================
数据抽象、接口(抽象类): virtual  //todo
----------------------------------------

virtual 关键字




========================================
**** C++ 高级教程 ****
----------------------------------------



========================================
C++ 文件和流，文件位置指针
----------------------------------------
1. 读文件

#include<iostream>
#include<fstream>

using namespace std;

// read file

int main(){
	char data[100];
	
	//以读模式打开文件
	ifstream infile;
	infile.open("ReadMe.txt");
	
	cout << "Reading from file:" << endl;
	infile >> data;
	
	//在屏幕上写入数据
	cout << data << endl;
	
	//再次从文件读取数据，并显示它
	infile >> data;
	cout << data << endl;
	
	//关闭打开的文件
	infile.close();
	
	return 0;
}



2. 写文件

#include<fstream>
#include<iostream>
using namespace std;

// c5_io_write.cpp

int main(){
	char data[100];
	
	// 打开文件，写模式
	ofstream outfile;
	outfile.open("dustbin/a1.txt");
	
	cout << "write to the file "<< endl;
	cout << "Enter your name:";
	cin.getline(data, 100); // 方法1: 输入 到 数组
	
	//向文件写入
	outfile << data << endl;
	
	cout << "Enter your age:";
	cin >> data; // 方法2: 输入 到 数组
	cin.ignore(); //什么作用？
	
	//再次向文件写入用户输入的数据
	outfile << data << endl;
	
	//关闭文件
	outfile.close();
	
	return 0;
}



3. 文件位置指针 //todo










========================================
C++ 异常处理 //todo
----------------------------------------

try, catch, 

自定义异常






========================================
C++ 动态内存 // todo 
----------------------------------------
C++ 程序中的内存分为两个部分：

栈：在函数内部声明的所有变量都将占用栈内存。
堆：这是程序中未使用的内存，在程序运行时可用于动态分配内存。


1. new 和 delete 运算符



2. 数组的动态内存分配



3. 对象的动态内存分配








========================================
C++ 命名空间
----------------------------------------

命名空间是为了解决重名问题。
相当于在类、函数、变量之上再加一层封装。


#include<iostream>
using namespace std;

namespace A{
	int num=10;
	namespace B{ //命名空间的嵌套
		int num=2;
		int num2=20;
	}
}

int num=500;

namespace B{
	int num=8000;
}

using namespace A::B; //后面就可以使用 A::B 中的元素了。

int main(){
	cout << "A::num=" << A::num << endl; //访问命名空间的元素
	cout << "A::B::num=" << A::B::num << endl;
	cout << "B::num=" << B::num << endl;
	cout << "::num=" << ::num << endl; //全局变量，就是命名空间为空

	printf("\n");
	cout << "A:B::num2=" << A::B::num2 << endl;
	cout << "num2=" << num2 << endl;
	
	return 0;
}










========================================
C++ 模板 template: 泛型技术的基础
----------------------------------------

可以使用模板来定义函数和类。


1. 函数模板
template <typename type> 
ret-type func-name(parameter list)
{
   // 函数的主体
}

比如求最大值的函数，根据参数不同，有以下几种形式：
int max(int a, int b){return a>b?a:b;}
double max(double a, double b){return a>b?a:b;}
float max(float a, float b){return a>b?a:b;}
char max(char a, char b){return a>b?a:b;}

可以使用下面一个函数代替：
template<class T>
T max2(T a, T b){return a>b?a:b;}



(2) 实例
#include<iostream>
using namespace std;

/*
int max2(int a, int b){return a>b?a:b;}
double max2(double a, double b){return a>b?a:b;}
float max2(float a, float b){return a>b?a:b;}
char max2(char a, char b){return a>b?a:b;}
*/
//使用 函数模板 技术，代替以上四个函数
// 函数模板: 编译器遇到函数模板的调用时，根据输入数据类型，生成对应的函数代码。
//开始报错，可能是 max 已经定义过了，重载错误，改为 max2 就正常了。


template<class T>
T max2(T a, T b){return a>b?a:b;}


int main(){
	
	int a1=max2(1,2);
	double a2=max2(1.2, 2.9);
	float a3=max2(1.2, 2.88);
	char a4=max2('a', 'z');
	
	cout << "int:" << a1 << endl;
	cout << "double:" << a2 << endl;
	cout << "float:" << a3 << endl;
	cout << "char:" << a4 << endl;
	
	return 0;
}




2. 类模板

类模板用于设计结构和成员函数完全相同，但是处理的数据类型不同的 通用类。

类模板的定义：
template<class T1, class T2>
class ClassName{
  //...
};




(2) 实例:
#include<iostream>
using namespace std;

/*
//比较大小的类: 只能比较整数
class Compare{
	private:
		int x,y;
	public:
		Compare(int x, int y){
			this->x=x;
			this->y=y;
		}
		int max(){
			return (x>y)?x:y;
		}
		int min(){
			return (x>y)?y:x;
		}
};
*/

//使用 类模板，支持更多类型
template<class Type>
class Compare{
	private:
		Type x,y;
	public:
		Compare(Type x, Type y){
			this->x=x;
			this->y=y;
		}
		Type max(){
			return (x>y)?x:y;
		}
		Type min(){
			return (x>y)?y:x;
		}
};

int main(){
	//Compare cmp(2,5);
	Compare<int> cmp(2,5); //使用类模板，要在类后面指定参数的 数据类型
	cout << "max:" << cmp.max() << endl;
	cout << "min:" << cmp.min() << endl;
	
	Compare<double> cmp2(25.5,5.2);
	cout << "max double:" << cmp2.max() << endl;
	
	Compare<char> C3('b', 'd');
	cout << "min string:" << C3.min() << endl;
}










========================================
C++ 预处理器 //todo
----------------------------------------
编译前完成。
不是C++语句，所以不需要分号结尾。

除了前面见过的 #include, 
C++ 还支持很多预处理指令，比如 #include、#define、#if、#else、#line 等，让我们一起看看这些重要指令。
















========================================
C++ 信号处理 //todo
----------------------------------------




========================================
C++ STL 教程
----------------------------------------
1. C++ 标准模板库的核心包括以下三个组件：

组件	描述
容器（Containers）	容器是用来管理某一类对象的集合。C++ 提供了各种不同类型的容器，比如 deque、list、vector、map 等。
算法（Algorithms）	算法作用于容器。它们提供了执行各种操作的方式，包括对容器内容执行初始化、排序、搜索和转换等操作。
迭代器（iterators）	迭代器用于遍历对象集合的元素。这些集合可能是容器，也可能是容器的子集。





2. 向量容器

下面的程序演示了向量容器（一个 C++ 标准的模板），它与数组十分相似，唯一不同的是，向量在需要扩展大小的时候，会自动处理它自己的存储需求：




#include<iostream>
#include<vector>
using namespace std;

//c12_STL_vector.cpp

int main(){
	//创建一个向量，存储 int
	vector<int> vec;
	int i;
	
	//显示 vec 的原始大小
	cout << "vector size = " <<  vec.size() << endl;
	
	//推入5个值到向量中
	for(i=0; i<5; i++){
		vec.push_back(i);
	}
	
	//显示 vec 扩展后的大小
	cout << "extended vector size=" << vec.size() << endl;
	
	//访问 vec 中的5个值
	for(i=0; i<5; i++){
		cout << "value of vec[" << i << "]=" << vec[i] << endl;
	}
	// 使用迭代器访问之
	vector<int>::iterator vi=vec.begin();
	while(vi != vec.end()){
		cout << "value of v=" << *vi << " | " << endl;
		vi++;
	}
	
	return 0;
}



关于上面实例中所使用的各种函数，有几点要注意：

push_back( ) 成员函数在向量的末尾插入值，如果有必要会扩展向量的大小。
size( ) 函数显示向量的大小。
begin( ) 函数返回一个指向向量开头的迭代器。
end( ) 函数返回一个指向向量末尾的迭代器。

















========================================
C++ 标准库
----------------------------------------
C++ 标准库可以分为两部分：

标准函数库： 这个库是由通用的、独立的、不属于任何类的函数组成的。函数库继承自 C 语言。
面向对象类库： 这个库是类及其相关函数的集合。
C++ 标准库包含了所有的 C 标准库，为了支持类型安全，做了一定的添加和修改。

1. 标准函数库
标准函数库分为以下几类：

输入/输出 I/O
字符串和字符处理
数学
时间、日期和本地化
动态分配
其他
宽字符函数



2. 面向对象类库
标准的 C++ 面向对象类库定义了大量支持一些常见操作的类，比如输入/输出 I/O、字符串处理、数值处理。面向对象类库包含以下内容：

标准的 C++ I/O 类
String 类
数值类
STL 容器类
STL 算法
STL 函数对象
STL 迭代器
STL 分配器
本地化库
异常处理类
杂项支持库






========================================
----------------------------------------


========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------
