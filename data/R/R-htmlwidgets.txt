htmlwidgets for R






========================================
简介: 使用R编程，调用js画图
----------------------------------------
这个想法很久了，也看到过Rstudio的最后一个标签，一直不清楚是怎么做到的。

1. 第一次看到

这一系统是在 RStudio 支持下于 2016 年开始逐步发展壮大，提供基于 JavaScript 可视化的 R 接口。

htmlwidgets for R 作为前端可视化（for 前端工程师）和数据分析可视化（for 数据工程师）的桥梁，发挥了两套技术领域之间的组合优势。

截至到 2018-08-02，经过两年多的发展，目前 CRAN 上已经有 101 个基于 htmlwidgets 开发的第三方包，参考链接。

ref:
https://mp.weixin.qq.com/s?__biz=MzI0ODgwMzIzNg==&mid=2247487229&idx=1&sn=22b181e727e3f0073f912683f69f68ae




(2) R代码

基于可视化组件库，一个可视化过程只需要一行代码即可完成，能极大提升开发效率。上图中最后的四象限矩阵分析示例图的代码如下：

vis_4quadrant(iris, 'Sepal.Length', 'Petal.Length', label = 'Species', tooltip = 'tooltip', title = '', xtitle = '萼片长度', ytitle = '花瓣长度', pointSize = 1, annotationSize = 1)

茲再附四象限矩阵分析可视化组件的函数声明：

vis_4quadrant <- function(df, x, y,
  label = '', tooltip = '', title = '', xtitle = '', ytitle = '',
  showLegend = T, jitter = T, centerType = 'mean',
  pointShape = 19, pointSize = 5, pointColors = collocatcolors2,
  lineSize = 0.4, lineType = 'dashed', lineColor = 'black',
  annotationFace = 'sans serif', annotationSize = 5, annotationColor = 'black', annotationDeviationRatio = 15,
  gridAnnotationFace = 'sans serif', gridAnnotationSize = 6, gridAnnotationColor = 'black', gridAnnotationAlpha = 0.6,
  titleFace = 'sans serif', titleSize = 12, titleColor = 'black',
  xyTitleFace = 'sans serif', xyTitleSize = 8, xyTitleColor = 'black',
  gridDesc = c('A 区', 'B 区', 'C 区', 'D 区'), dataMissingInfo = '数据不完整', renderType = 'widget') {

  # 绘制分组散点图
  #
  # Args:
  #   df: 数据框；必要字段；需要进行图形绘制的数据，至少应该有三列
  #   x: 字符串；必要字段；映射到 X 轴的列名，对应 df 的某一列，此列必须是数值类型或日期类型
  #   y: 字符串；必要字段；映射到 Y 轴的列名，对应 df 的某一列
  #   label: 字符串；映射到点上的文字注释
  #   tooltip: 字符串；映射到点上的悬浮信息
  #   title: 字符串；标题
  #   xtitle: 字符串；X 轴标题
  #   ytitle: 字符串；Y 轴标题
  #   showLegend: bool；定义分区图例是否展示
  #   jitter: bool；定义是否扰动
  #   centerType: 字符串；定义中心点类型，mean 代表平均值，median 代表中位数
  #   pointShape: 整形；定义点型
  #   pointSize: 数值；定义点大小
  #   lineSize: 数值；定义线宽
  #   lineType: 字符串；定义线型
  #   lineColor: 字符串；定义线色
  #   annotationFace: 字符串；定义注释字体
  #   annotationSize: 数值；定义注释字体大小
  #   annotationColor: 字符串；定义注释字体颜色
  #   annotationDeviationRatio: 数值；定义注释文本向上偏移系数
  #   gridAnnotationFace: 字符串；定义网格注释字体
  #   gridAnnotationSize: 数值；定义网格注释字体大小
  #   gridAnnotationColor: 字符串；定义网格注释字体颜色
  #   gridAnnotationAlpha: 数值；定义网格注释文本透明度
  #   titleFace: 字符串；定义标题字体
  #   titleSize: 数值；定义标题字体大小
  #   titleColor: 字符串；定义标题字体颜色
  #   xyTitleFace: 字符串；定义 X、Y 轴标题字体
  #   xyTitleSize: 数值；定义 X、Y 轴标题字体大小
  #   xyTitleColor: 字符串；定义 X、Y 轴标题字体颜色
  #   gridDesc: 长度为 4 的字符串向量
  #   dataMissingInfo: 字符串；数据问题提示文本
  #   renderType: 字符串；定义渲染结果类型，widget 对应 htmlwidget 组件，html 对应 html 内容

  #   代码实现略
}






========================================
**** R 服务化改造 ****
----------------------------------------




========================================
R 服务化框架 //todo
----------------------------------------
R 本身既是一门语言、也是一个跨平台的操作环境，具备强大的数据处理、数据分析、和数据可视化能力。除了在个人电脑的 Windows/MacOS 环境中上充当个人统计分析工具外，也可以运行在 Linux 服务环境中，因此可以将 R 作为分析展现引擎，外围通过 Java 等系统开发语言完成缓存、安全检查、权限控制等功能，开发企业报表系统或数据分析（挖掘）框架，而不仅仅只是将 R 作为一个桌面软件。

企业报表系统或数据分析（挖掘）框架设计方案如下图所示：

db -> R -> Java 端;




========================================
foreach + doParallel 多核并行方案 //todo
----------------------------------------

foreach + doParallel 多核并行方案


作为一门统计学家开发的解释性语言，R 运行的是 CPU 单核上的单线程程序、并且需要将全部数据加载到内存进行处理，因此和 Java、Python 等系统语言相比，计算性能是 R 的软肋。

对于大数据集合的计算场景，需要尽量将数据计算部分通过 Hive、Kylin 等分布式计算引擎完成，尽量让 R 只处理结果数据集；

另外也可以通过 doParallel + foreach 方案，通过多核并行提升计算效率，代码示例如下：



library(doParallel)
library(foreach)
registerDoParallel(cores = detectCores())

vis_process1  <- function() {
    # 可视化过程1 ...
}
vis_process2  <- function() {
    # 可视化过程2 ...
}
data_process1 <- function() {
    # 数据处理过程1 ...
}
data_process2 <- function() {
    # 数据处理过程2 ...
}

processes <- c('vis_process1', 'vis_process2', 'data_process1', 'data_process2')
process_res <- foreach(i = 1:length(process), .packages = c('magrittr')) %dopar% {
    do.call(processes[i], list())
}

vis_process1_res  <- process_res[[1]]
vis_process2_res  <- process_res[[2]]
data_process1_res <- process_res[[3]]
data_process2_res <- process_res[[4]]






========================================
图形化数据报告渲染性能
----------------------------------------

在数据分析过程中，R 最重要的是充当图形引擎的角色，因此有必要了解其图形渲染性能。针对主流的基于 rmarkdown + flexdashboard 的数据分析报告渲染方案，其性能测试结果如下：

系统环境：
4 核 CPU，8 G 内存，2.20GHz 主频
Linux version 3.10.0-123.el7.x86_64

测试方法：
测试在不同并发度下、不同复杂度的渲染模式下，重复渲染 100 次的耗时。


根据测试结果可知：
单应用平均渲染时长在 0.74s 以上，具体的渲染时长视计算复杂度而定（可以通过上节介绍的“foreach + doParallel 多核并行方案 ”加快处理过程）。根据经验，大部分应用能在秒级完成渲染。
由于单核单线程模式所限，当并发请求超过 CPU 核数时，渲染吞吐量并不会相应提升。需要根据实际业务场景匹配对应的服务端机器配置，并在请求转发时设置并发执行上限。对于内部运营性质的数据系统，单台 4 核 8 G 机器基本能满足要求。



========================================
|-- 用flexdashboard包创建交互式仪表盘：比shiny更简单
----------------------------------------
https://github.com/rstudio/flexdashboard
https://pkgs.rstudio.com/flexdashboard/

由于flexdashboard支持嵌入shiny，所以算上shiny+shinydashboard的更为强大的交互功能，就更无敌了。

1.flexdashboard包的亮点包括：

 支持各式组件，包括交互式的htmlwidgets；基础的，lattice和网格图形；表格数据；圆规表；值框

 灵活指定行和列的布局。组件智能调整大小以便填充浏览器，并适合在移动设备上显示。

 支持在仪表盘添加文本注释，包括各种假设，文字说明等

 Storyboard布局用于呈现可视化和相关评论的序列

 默认情况下，仪表板是标准的HTML文档。它可以部署到任何一个web服务器上，甚至可以附加到电子邮件。你可以通过选择性的添加Shiny组件来增强交互性，然后将它部署到Shiny Server或者是shinyapps.io



ref:
https://cloud.tencent.com/developer/article/1810861
https://zhuanlan.zhihu.com/p/41423522





========================================
R 在美团数据产品中的落地实践
----------------------------------------

美团到店餐饮数据团队从 2015 年开始逐步将 R 作为数据产品的辅助开发语言，截至 2018 年 8 月，已经成功应用在面向管理层的日周月数据报告、面向数据仓库治理的分析工具、面向内部运营与分析师的数据 Dashboard、面向大客户销售的品牌商家数据分析系统等多个项目中。目前所有的面向部门内部的定制式分析型产品，都首选使用 R 进行开发。

另外我们也在逐步沉淀 R 可视化与分析组件、开发基于 R 引擎的配置化 BI 产品开发框架，以期进一步降低 R 的使用门槛、提升 R 的普及范围。

下图是美团到店餐饮数据团队在数据治理过程中，使用 R 开发的 ETL 间依赖关系可视化工具：





========================================
安装R包
----------------------------------------
1.
BiocManager::install("ggtree")


2.
install.packages("devtools")

library(devtools)
install_github("thackl/thacklr")
install_github("thackl/gggenomes")



========================================
统计学
----------------------------------------

bilibili 上的中文搬运：https://space.bilibili.com/1309928900/video





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------
