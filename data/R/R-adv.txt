R高级部分: 




========================================
****** R OOP 概述 ******
----------------------------------------
R语言有两种不同的OOP机制，分别是从其前身S语言继承而来的S3 Object和S4 Object，其中S4 Object更加的正式、也是现在用于开发的主力军，所以本文就从S4 Object谈起，并在最后讨论一下古老的S3


R语言基于S3的面向对象编程




========================================
R语言基于S4的面向对象编程
----------------------------------------
S4对象系统具有明显的结构化特征，更适合面向对象的程序设计。Bioconductor社区，以S4对象系统做为基础架构，只接受符合S4定义的R包。



S4对象介绍:
S4对象系统是一种标准的R语言面向对象实现方式，S4对象有明确的类定义，参数定义，参数检查，继承关系，实例化等的面向对象系统的特征。



ref:
http://www.itkeyword.com/doc/8259476531414986968
https://www.cnblogs.com/awishfullyway/p/6485240.html







========================================
|-- 创建S4对象
----------------------------------------
1. 创建S4类和实例化出对象

由于S4对象是标准的面向对象实现方式， 有专门的类定义函数 setClass() 和类的实例化函数new() ，我们看一下setClass()和new()是如何动作的。

(1)setClass()
Create a class definition and return a generator function to create objects from the class. Typical usage will be of the style:

函数定义
myClass <- setClass("myClass", slots= ...., contains =....)
参数解释: 
	- slots= and contains= 指定新类的slots插槽，以及新类需要继承的类。
	- 



setClass(Class, representation, prototype, contains=character(),
          validity, access, where, version, sealed, package,
          S3methods = FALSE, slots)

参数列表：
	Class: 定义类名
	slots: 定义属性和属性类型
	contains=character(): 定义父类，继承关系
	
	prototype: 定义属性的默认值
	where: 定义存储空间
	validity: 定义属性的类型检查
	sealed: 如果设置TRUE，则同名类不能被再次定义
	package: 定义所属的包
	
	S3methods: R3.0.0以后不建议使用
	representation R3.0.0以后不建议使用
	access R3.0.0以后不建议使用
	version R3.0.0以后不建议使用
#





========================================
----------------------------------------

访问对象的属性
S4的泛型函数
查看S4对象的函数
S4对象的使用


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------

