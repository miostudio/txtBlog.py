R语言与统计学


========================================
R 初始化函数
----------------------------------------

rm(list=ls())
Sys.setenv(language='en')
options(stringsAsFactors = F)







========================================
R list 增删改查及apply批量操作
----------------------------------------

列表是 R 语言的对象集合，可以用来保存不同类型的数据，可以是数字、字符串、向量、另一个列表等，当然还可以包含矩阵和函数。
基本结构就是键值对，没有指定键的，默认使用数字下标。


1. R 语言创建列表使用 list() 函数。
(1) 不带名字的list
list_data <- list("apple", c(1,20,3), 500, iris[1:2,])

> print(list_data)
[[1]]
[1] "apple"

[[2]]
[1]  1 20  3

[[3]]
[1] 500

[[4]]
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa


(2) 也可以定义时指定名字
list2=list(
	city=c("A", "B", "C"),
	people=c(1,2,3,4,5,6)
)

> list2
$city
[1] "A" "B" "C"

$people
[1] 1 2 3 4 5 6

检查是不是list:
> is.list(list2)
[1] TRUE



(3) names() 函数给列表的元素命名，也可以获取元素键名。

# 定义列表包含向量、矩阵、数据框
list_2 <- list(
	c("boss","worker"), 
	matrix(c(1,2,3,4,5,6), nrow = 2),
	iris[1:2,]
)

#1) 给列表元素设置名字
names(list_2) <- c("title", "pay", "info")

# 显示列表
> print(list_2)
$title
[1] "boss"   "worker"

$pay
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

$info
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa



#2) 获取名字
> names(list_data)
NULL
> names(list_2)
[1] "title" "pay"   "info" 



#3) 还可以只设置某一个下标的名字
> names(list_2)[2]="wage"
> names(list_2)
[1] "title" "wage"  "info" 






2. 访问列表
(1)命名list: 使用 listName[[ 下标或者键名]]，或者 listName$键名 访问。

list_2 <- list(
	title=c("boss","worker"), 
	pay=matrix(c(1,2,3,4,5,6), nrow = 2),
	info=iris[1:2,]
)

> list_2[[1]]
[1] "boss"   "worker"

> list_2[["title"]]
[1] "boss"   "worker"

> list_2$title
[1] "boss"   "worker"



如果坚持用单个方框号呢？
> list_2["title"]
$title
[1] "boss"   "worker"

> list_2[1]
$title
[1] "boss"   "worker"

有什么区别呢？
> class(list_2[[1]]) #2个方括号输出的是值
[1] "character"

> class(list_2[1]) #而单个方括号输出的是键值对，还是一个list
[1] "list"



(2)非命名list: 则只能使用[[下标]] 访问。

> list_data <- list("apple", c(1,20,3), 500, iris[1:2,])
> list_data[[2]]
[1]  1 20  3




3. 增删改
只能把无名元素添加到列表的末尾。但是可以通过下标或名字更新任何元素。

list_3 <- list(
	title=c("boss","worker")
)

(1) 增加元素
> list_3[[2]]=c("buildingXX", "roomXX")

或者 
> list_3$year=c(20, 1)

查看 
> list_3  #输出略
$title
[1] "boss"   "worker"

[[2]]
[1] "buildingXX" "roomXX"    

$year
[1] 20  1


(2) 删除元素
> list_3$year=NULL

查看
> list_3
$title
[1] "boss"   "worker"

[[2]]
[1] "buildingXX" "roomXX"  


(3) 更新/修改
> list_3$title=c("employer", "employee")

查看
> list_3
$title
[1] "employer" "employee"

[[2]]
[1] "buildingXX" "roomXX"  




4. 合并列表
list1=list(1,3)
list2=list(10,20, c(100,200) )
list3=c(list1, list2)

> list3
[[1]]
[1] 1

[[2]]
[1] 3

[[3]]
[1] 10

[[4]]
[1] 20

[[5]]
[1] 100 200






5. 列表展开为向量 unlist
> list1=list(
   A=1:3,
   B=2:5
)

> list1
$A
[1] 1 2 3

$B
[1] 2 3 4 5

> unlist(list1) #默认是要名字，有多个元素的name是加数字后缀
A1 A2 A3 B1 B2 B3 B4 
 1  2  3  2  3  4  5 

> unlist(list1, use.names = F) #不要名字
[1] 1 2 3 2 3 4 5






6. 使用 apply 对list进行循环

list是大规模数据操作非常优秀的方式，能够存放非结构化的文本数据。


(1) 例1：统计list中每个键值对中值的数量。
list1=list(
  A=1:3,
  B=2:5,
  C=8:20
)
list1

# 方式1：传入每个键值对
lapply(list1, function(x){
  length(x)
})

输出：
$A
[1] 3

$B
[1] 4

$C
[1] 13


# 2) 优化输出形式
sapply(list1, function(x){
  length(x)
})

输出:
 A  B  C 
 3  4 13


# 2) 方式2: 传入每个键
sapply(
  X=names(list1),
  FUN=function(x){
    length(list1[[x]])
  },
  simplify = F, #这个比直接用 lapply 的好处是：返回的list可以带有name
  USE.NAMES = T
)

输出:
$A
[1] 3

$B
[1] 4

$C
[1] 13



(2) 例2: 提取长度大于某个值的list元素

x=list(
  A=1:3,
  B=2:5,
  C=8:20
)

> x[lapply(x, length)>3]
$B
[1] 2 3 4 5

$C
 [1]  8  9 10 11 12 13 14 15 16 17 18 19 20













========================================
绘图辅助函数
----------------------------------------
1. 坐标轴控制

数字取到最接近的下一个50，比如 60 则取 100，112 则取 150

toAnchor=function(x, anchor=50){
	res=x%%anchor
	x=ifelse(res==0, x, x+anchor-res);
	return (x);
}

toAnchor(c(120, 51, 20), 50)








========================================
R 高阶函数: Reduce、Filter、Find、Map、Negate、Position
----------------------------------------
高阶函数：顶头的都是写过的。

Reduce(f, x, init, right = FALSE, accumulate = FALSE)
Filter(f, x)
 Find(f, x, right = FALSE, nomatch = NULL)
 Map(f, ...)
Negate(f)
 Position(f, x, right = FALSE, nomatch = NA_integer_)



1. Reduce(f, x, init, right = FALSE, accumulate = FALSE)

这是 map/reduce 模型中的后者。能依次对一系列元素使用只能处理2个参数的函数。

(1) 比如对2个数累加的函数，可以应用到一系列数字上：
> num=c(2,4,8,10,200)
> sum(num)
[1] 224

add=function(a,b){
  cat( "a=", a, "; b=",b, "\n", sep="" )
  return(a+b)
}
Reduce(add, num) #224
通过输出，可以知道计算过程，就是前2个元素的和作为a，再读入下一个作为b，相加后再作为a,...
a=2; b=4
a=6; b=8
a=14; b=10
a=24; b=200
[1] 224


(2) 求几个集合的交集
a1=1:10
a2=-10:8
a3=5:50
a4=2:7
Reduce(intersect, list(a1, a2, a3, a4) )
# [1] 5 6 7





2. Filter(f, x) 把函数f使用到x的每个元素，如果返回值为TRUE，则返回x中对应位置的元素

例子：
> # 高阶函数 Filter(f, x) ====
> Filter(f=function(x)x>0, c(-10:4)) #正数
[1] 1 2 3 4
> Filter(f=function(x) 0==x%%2, c(-10:4)) #偶数
[1] -10  -8  -6  -4  -2   0   2   4





5. Negate(f) 返回给定函数的反面函数。
Negate creates the negation of a given function.

negation [nɪˈɡeɪʃn] n. 否认，拒绝；否定，对立面；取消，无效；反演

例子：
> x=list(a=1, b=2, c=NULL, d=3)
> Filter(f = is.null, x)
$c
NULL

> Filter(f = Negate(f = is.null), x)
$a
[1] 1

$b
[1] 2

$d
[1] 3








========================================
常见的分布
----------------------------------------



========================================
|-- 正态分布 The Normal Distribution
----------------------------------------
x=seq(-10,30)
y=dnorm(x,mean=10,sd=4)
plot(x,y, type='l', lwd=2,col='red')
text(20,0.07,labels="mean=10,sd=4")
#
x2=barplot(y, main="The Normal Distribution")
lines(x2,y, type='o', lwd=2,col='red')
text(10,0.07,labels="mean=10,sd=4")
text(x2,-0.004,labels=x,
     xpd=T #有这句话才能显示在图外
)
abline(v=x2[21],lty=2)

#
qqplot(x,y)
lines(c(0,0), c(1,1) , type='l')


========================================
|-- 负二项分布 The Negative Binomial Distribution
----------------------------------------
x=seq(0,60)
y=dnbinom(x,size=5,prob=0.2)
x2=barplot(y, main="Negative Binomial Distribution")
#plot(x,y, type='o', lwd=2,col='red')
lines(x2,y, type='o', lwd=2,col='red')
text(47,0.03,labels="size=5,prob=0.2")
text(x2,-0.0005,labels=x, x,
     xpd=T, #有这句话才能显示在图外
     )









========================================
Dash R User Guide
----------------------------------------
https://dash.plotly.com/r

1.简介
https://zhuanlan.zhihu.com/p/354078627
本来Dash是 python的，不过也开始向R扩展了。

Dash 是建立在 Flask 基础上的。



码R的一般用RStudio shiny
Python的世界有 dash 和 bokeh, dash的R版本也快release了



2. 




========================================
R 全局变量 
----------------------------------------
1. 全局变量
# https://www.r-bloggers.com/2017/09/global-variables-in-r-packages/



(1) 方法1: Naive Implementation
data_path = "data"

set_data_path <- function(path) {
  data_path <<- path
}

set_data_path("/path/to/data/")
data_path

# 包内使用则会报错。
However, building the package and giving a try yielded an error.

> set_data_path("/tmp")
Error in set_data_path("/tmp") : 
  cannot change value of locked binding for 'data_path'

While investigating the problem I learned about unlockBinding(), which is good to know.


(2) 方法2: Improved Implementation
pkg.globals <- new.env()

pkg.globals$data_path <- "data"

set_data_path <- function(path) {
  pkg.globals$data_path <- path
}

set_data_path("path/to/your/data/2/")
pkg.globals$data_path



========================================
目前 R 主流支持的有三套可视化系统
----------------------------------------
内置系统：包括有 base、grid 和 lattice 三个内置发行包，支持以相对比较朴素的方式完成图形绘制。


ggplot2：由 RStudio 的首席科学家 Hadley Wickham 开发，ggplot2 通过一套图形语法支持，支持通过图层叠加以组合的方式支持高度定制的可视化。这一理念也逐步影响了包括 Plotly、阿里 AntV 等国内外数据可视化解决方案。截至到 2018-08-02，CRAN 已经落地了 40 个 ggplot2 扩展包，参考链接。


htmlwidgets for R：这一系统是在 RStudio 支持下于 2016 年开始逐步发展壮大，提供基于 JavaScript 可视化的 R 接口。htmlwidgets for R 作为前端可视化（for 前端工程师）和数据分析可视化（for 数据工程师）的桥梁，发挥了两套技术领域之间的组合优势。截至到 2018-08-02，经过两年多的发展，目前 CRAN 上已经有 101 个基于 htmlwidgets 开发的第三方包。


详细使用见专题。



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------

